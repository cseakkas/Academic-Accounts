# Q.1: 
 SELECT 
    o.id AS order_id,
    o.order_date,
    o.total_amount,
    o.status,
    GROUP_CONCAT(d.name SEPARATOR ', ') AS dishes_list
FROM orders o
JOIN order_items oi ON o.user_id = oi.order_id
JOIN dishes d ON oi.dish_id = d.id
JOIN users u ON o.user_id = u.id
WHERE 
    u.id = 1;




# Q.2:

SELECT d.cuisine, SUM(oi.quantity * oi.price) AS total_revenue
FROM orders o
JOIN order_items oi ON o.id = oi.order_id
JOIN dishes d ON oi.dish_id = d.id
WHERE o.status = 'Processing'
GROUP BY d.cuisine;


# Q.3:

SELECT 
    d.id,
    d.name,
    d.description,
    d.price,
    d.cuisine,
    SUM(oi.quantity) AS total_quantity_ordered
FROM dishes d
JOIN order_items oi ON d.id = oi.dish_id
GROUP BY d.id, d.name, d.description, d.price, d.cuisine
ORDER BY total_quantity_ordered DESC LIMIT 1;

# Q.4:

SELECT 
    d.id,
    d.name,
    d.description,
    d.price,
    d.cuisine,
    MAX(o.order_date) AS last_order_date
FROM dishes d
LEFT JOIN order_items oi ON d.id = oi.dish_id
LEFT JOIN orders o ON oi.order_id = o.id
GROUP BY d.id, d.name, d.description, d.price, d.cuisine;


# Q.5:

SELECT 
    u.id AS user_id,
    u.name AS customer_name,
    u.email,
    COUNT(o.id) AS total_orders,
    SUM(o.total_amount) AS total_spent
FROM 
    users u
JOIN 
    orders o ON u.id = o.user_id
GROUP BY 
    u.id, u.name, u.email
ORDER BY 
    total_orders DESC,  
    total_spent DESC  
LIMIT 10;

# Q.6:

SELECT COUNT(*) AS total_orders_today
FROM orders
WHERE DATE(order_date) = CURDATE();

SELECT COUNT(*) AS total_incomplete_orders
FROM orders
WHERE status IN ('Processing', 'Pending', 'Incomplete');

SELECT COUNT(*) AS total_orders_this_week
FROM orders
WHERE YEARWEEK(order_date, 1) = YEARWEEK(CURDATE(), 1); 

# Q.7:

ALTER TABLE dishes 
ADD FULLTEXT INDEX ft_search (name, description, cuisine);

SELECT 
    id,
    name,
    description,
    price,
    cuisine
FROM dishes
WHERE MATCH(name, description, cuisine) AGAINST ('your_search_term' IN NATURAL LANGUAGE MODE)
ORDER BY price DESC;

# Q.8:
SELECT 
    u.id AS user_id,
    u.name AS customer_name,
    o.id AS order_id,
    o.order_date,
    o.total_amount,
    o.status,
    GROUP_CONCAT(d.name SEPARATOR ', ') AS dishes
FROM users u
JOIN orders o ON u.id = o.user_id
JOIN order_items oi ON o.id = oi.order_id
JOIN dishes d ON oi.dish_id = d.id
WHERE 
    (u.name LIKE '%customer_name%' OR '%customer_name%' = '')  
    AND (DATE(o.order_date) = '2024-09-30' OR '2024-09-30' = '')  
    AND (d.name LIKE '%dish_name%' OR '%dish_name%' = '')  
GROUP BY o.id 
ORDER BY o.order_date DESC;

# Q.9:
SELECT 
    d.cuisine, 
    SUM(oi.price * oi.quantity) AS total_revenue
FROM orders o
JOIN order_items oi ON o.id = oi.order_id
JOIN dishes d ON oi.dish_id = d.id
WHERE 
    o.status = 'Processing'
    AND (o.order_date BETWEEN '2024-09-01' AND '2024-09-30') 
GROUP BY d.cuisine
ORDER BY total_revenue DESC;

# Q.10:

SELECT 
    id,
    name,
    description,
    price,
    cuisine
FROM dishes
WHERE 
    MATCH(name, description, cuisine) AGAINST ('pizza' IN NATURAL LANGUAGE MODE)
    AND (price BETWEEN 0 AND 150 OR price BETWEEN 151 AND 500 OR price BETWEEN 501 AND 1000 OR price > 1000 OR @price_range IS NULL) 
ORDER BY price DESC;

SELECT 
    id,
    name,
    description,
    price,
    cuisine
FROM dishes
WHERE 
    MATCH(name, description, cuisine) AGAINST ('pizza' IN NATURAL LANGUAGE MODE)
    AND (price BETWEEN 151 AND 500) 
ORDER BY price DESC;

SELECT 
    id,
    name,
    description,
    price,
    cuisine
FROM dishes
WHERE 
    MATCH(name, description, cuisine) AGAINST ('pizza' IN NATURAL LANGUAGE MODE)
    AND (
        (price BETWEEN 0 AND 150 AND @selected_price_range = '0-150') OR
        (price BETWEEN 151 AND 500 AND @selected_price_range = '151-500') OR
        (price BETWEEN 501 AND 1000 AND @selected_price_range = '501-1000') OR
        (price > 1000 AND @selected_price_range = '1001+') OR
        @selected_price_range IS NULL 
    )
ORDER BY price DESC;







